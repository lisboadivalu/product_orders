<?php

namespace Test;

use App\Domain\Category\UseCases\CreateCategoryUseCase;
use App\Domain\Category\UseCases\DeleteCategoryUseCase;
use App\Domain\Category\UseCases\GetAllCategoriesUseCase;
use App\Domain\Category\UseCases\UpdateCategoryUseCase;
use Mockery;
use PHPUnit\Framework\TestCase;

class CategoryTest extends TestCase
{

    private $createCategoryUseCase;
    private $getCategoryUseCase;
    private $updateCategoryUseCase;
    private $deleteCategoryUseCase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createCategoryUseCase = Mockery::mock(CreateCategoryUseCase::class);
        $this->getCategoryUseCase = Mockery::mock(GetAllCategoriesUseCase::class);
        $this->updateCategoryUseCase = Mockery::mock(UpdateCategoryUseCase::class);
        $this->deleteCategoryUseCase = Mockery::mock(DeleteCategoryUseCase::class);
    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_create_a_category($categoryDataSuccess): void
    {
        $useCase = $this->createCategoryUseCase->shouldReceive('handle')
            ->with($categoryDataSuccess)
            ->once()
            ->andReturn($categoryDataSuccess);

        $this->assertNotEmpty($useCase);

    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_get_categories($categoryDataSuccess, $categoryCreated): void
    {
        $useCase = $this->getCategoryUseCase->shouldReceive('handle')
            ->once()
            ->andReturn($categoryCreated);
        $this->assertNotEmpty($useCase);
    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_can_update_a_category($categoryDataSuccess, $categoryCreated, $categoryUpdated): void
    {
        $useCase = $this->updateCategoryUseCase->shouldReceive('handle')
            ->with($categoryUpdated)
            ->once()
            ->andReturn(true);

        $this->assertTrue($useCase == true);

    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_can_delete_a_category($categoryDataSuccess, $categoryCreated, $categoryUpdated): void
    {
        $useCase = $this->deleteCategoryUseCase->shouldReceive('handle')
            ->with($categoryUpdated)
            ->once()
            ->andReturn(true);

        $this->assertTrue($useCase == true);

    }

    public static function categoryProvider(): array
    {
        return [
            [
                'categoryDataSucess' => [
                    'title' => 'new category',
                    'tax_percentage' => 35
                ],
                'categoryCreated' => [
                    'id' => 1,
                    'title' => 'new category',
                    'tax_percentage' => 35,
                    'created_at' => '2022-11-11 22:22:22',
                    'updated_at' => null
                ],
                'categoryUpdated' => [
                    'id' => 1,
                    'title' => 'new category'
                ]
            ]
        ];
    }
}