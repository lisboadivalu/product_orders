<?php

use App\Domain\Product\UseCases\CreateProductUseCase;
use App\Domain\Product\UseCases\DeleteProductUseCase;
use App\Domain\Product\UseCases\GetAllProductsUseCase;
use App\Domain\Product\UseCases\UpdateProductUseCase;
use PHPUnit\Framework\TestCase;

class ProductTest extends TestCase
{
    private $createProductUseCase;
    private $getProductUseCase;
    private $updateProductUseCase;
    private $deleteProductUseCase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createProductUseCase = Mockery::mock(CreateProductUseCase::class);
        $this->getProductUseCase = Mockery::mock(GetAllProductsUseCase::class);
        $this->updateProductUseCase = Mockery::mock(UpdateProductUseCase::class);
        $this->deleteProductUseCase = Mockery::mock(DeleteProductUseCase::class);
    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_create_an_order($categoryDataSuccess): void
    {
        $useCase = $this->createProductUseCase->shouldReceive('handle')
            ->with($categoryDataSuccess)
            ->once()
            ->andReturn($categoryDataSuccess);

        $this->assertNotEmpty($useCase);

    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_get_a_product($categoryDataSuccess, $categoryCreated): void
    {
        $useCase = $this->getProductUseCase->shouldReceive('handle')
            ->once()
            ->andReturn($categoryCreated);
        $this->assertNotEmpty($useCase);
    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_can_update_a_product($categoryDataSuccess, $categoryCreated, $productUpdated): void
    {
        $useCase = $this->updateProductUseCase->shouldReceive('handle')
            ->with($productUpdated)
            ->once()
            ->andReturn(true);

        $this->assertTrue($useCase == true);

    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_can_delete_a_product($categoryDataSuccess, $categoryCreated, $productUpdated): void
    {
        $useCase = $this->deleteProductUseCase->shouldReceive('handle')
            ->with($productUpdated)
            ->once()
            ->andReturn(true);

        $this->assertTrue($useCase == true);

    }

    public static function categoryProvider(): array
    {
        return [
            [
                'productDataSucess' => [
                    'category_id' => 1,
                    'title' => 'new product',
                    'price' => 84
                ],
                'productCreated' => [
                    'id' => 1,
                    'category_id' => 1,
                    'title' => 1,
                    'price' => 84,
                    'created_at' => '2022-11-11 22:22:22',
                    'updated_at' => null
                ],
                'productUpdated' => [
                    'id' => 1,
                    'product_id' => 1
                ]
            ]
        ];
    }
}