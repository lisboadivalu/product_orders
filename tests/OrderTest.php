<?php

namespace Test;

use App\Domain\Order\UseCases\CreateOrderUseCase;
use App\Domain\Order\UseCases\DeleteOrderUseCase;
use App\Domain\Order\UseCases\GetAllOrdersUseCase;
use App\Domain\Order\UseCases\UpdateOrderUseCase;
use Mockery;
use PHPUnit\Framework\TestCase;

class OrderTest extends TestCase
{
    private $createOrderUseCase;
    private $getOrderUseCase;
    private $updateOrderUseCase;
    private $deleteOrderUseCase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createOrderUseCase = Mockery::mock(CreateOrderUseCase::class);
        $this->getOrderUseCase = Mockery::mock(GetAllOrdersUseCase::class);
        $this->updateOrderUseCase = Mockery::mock(UpdateOrderUseCase::class);
        $this->deleteOrderUseCase = Mockery::mock(DeleteOrderUseCase::class);
    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_create_an_order($orderDataSuccess): void
    {
        $useCase = $this->createOrderUseCase->shouldReceive('handle')
            ->with($orderDataSuccess)
            ->once()
            ->andReturn($orderDataSuccess);

        $this->assertNotEmpty($useCase);

    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_get_an_order($orderDataSuccess, $orderCreated): void
    {
        $useCase = $this->getOrderUseCase->shouldReceive('handle')
            ->once()
            ->andReturn($orderCreated);
        $this->assertNotEmpty($useCase);
    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_can_update_an_order($orderDataSuccess, $orderCreated, $orderUpdated): void
    {
        $useCase = $this->updateOrderUseCase->shouldReceive('handle')
            ->with($orderUpdated)
            ->once()
            ->andReturn(true);

        $this->assertTrue($useCase == true);

    }

    /**
     * @return void
     * @dataProvider categoryProvider
     */
    public function test_if_can_delete_an_order($orderDataSuccess, $orderCreated, $orderUpdated): void
    {
        $useCase = $this->deleteOrderUseCase->shouldReceive('handle')
            ->with($orderUpdated)
            ->once()
            ->andReturn(true);

        $this->assertTrue($useCase == true);

    }

    public static function categoryProvider(): array
    {
        return [
            [
                'orderDataSucess' => [
                    'category_id' => 1,
                    'product_id' => 1,
                ],
                'orderCreated' => [
                    'id' => 1,
                    'product_title' => 'new product',
                    'total_sold' => 72.000,
                    'total_tax_paid' => 20.000,
                    'created_at' => '2022-11-11 22:22:22',
                    'updated_at' => null
                ],
                'orderUpdated' => [
                    'id' => 1,
                    'product_id' => 1
                ]
            ]
        ];
    }
}